go.property("flicker_check",true)
function init(self)
	msg.post(".", "acquire_input_focus")

	-- Reset Variables
	fight = false
	act = false
	items = false
	current_button = "item"
	
	-- Disable nodes
	gui.set_enabled(gui.get_node("flicker"), false)
	gui.set_enabled(gui.get_node("act"), false)
	
end


function on_message(self, message_id, message, sender)
	
	-- Enable Fight
	if message_id == hash("enable_fight") then
		gui.set_enabled(gui.get_node("talk"), false)
		gui.set_enabled(gui.get_node("item"), false)
		msg.post("/printer#printer_example","disable")
		sound.pause("/sounds#"..level,true)
		enemy_type = enemy_num[enemy]
		gui.set_text(gui.get_node("act_text_2"), text[text_2[enemy_type]])
		gui.set_text(gui.get_node("act_text_3"), text[text_3[enemy_type]])
		gui.set_text(gui.get_node("armor_text"), "Armor:\n"..armor)
		for i, v in ipairs(inventory) do
			gui.set_text(gui.get_node("item_text_"..i),v)
		end
		self.flicker_check = true
		current_button = "item"
		fight = true
		x= 320
		y= 180
		loop = 0
		flicker_loop = 0
		flicker_enabled = false
		timer.delay(0.2, true, flicker)
	elseif message_id == hash("king_fight") then
		king_2_check = 0
		king_pos_check = 1
		gui.set_enabled(gui.get_node("talk"), false)
		gui.set_enabled(gui.get_node("item"), false)
		msg.post("/printer#printer_example","disable")
		sound.pause("/sounds#"..level,true)
		enemy_type = "King"
		gui.set_text(gui.get_node("act_text_2"), text[text_2[enemy_type]])
		gui.set_text(gui.get_node("act_text_3"), text[text_3[enemy_type]])
		gui.set_text(gui.get_node("armor_text"), "Armor:\n"..armor)
		for i, v in ipairs(inventory) do
			gui.set_text(gui.get_node("item_text_"..i),v)
		end
		current_button = "item"
		fight = true
		x= 320
		y= 180
		loop = 0
		sound.play("/sounds#king_theme")
		msg.post("/printer#printer_example", "printtext", {line = approach[enemy_type], battle = false})
		camera.deadzone(camera_id, 0, 0, 0, 0)
		gui.set_scale(gui.get_node("box"),vmath.vector3(0.7,0.7,0))
		gui.set_position(gui.get_node("bottom"), vmath.vector3(0,-380,0))
		camera.set_zoom(camera_id, camera_zoom[enemy_type])
		camera.follow(camera_id, "/backend", {offset = vmath.vector3(0,0,0)})
		--Disable Fight
	elseif message_id == hash("disable_fight") then
		if fight then
			msg.post("/printer#printer_example","disable")
			gui.animate(gui.get_node("box"),"scale",vmath.vector3(1,1,1),gui.EASING_LINEAR, 0.4)
			gui.animate(gui.get_node("bottom"), "position", vmath.vector3(0,-510,0), gui.EASING_LINEAR, 0.4)
			sound.stop("/sounds#fight_song")
			camera.follow(camera_id, "/player", {offset = vmath.vector3(0,0,0)})	
			camera.deadzone(camera_id, 320, 180, 320, 180)
			msg.post("/printer", "remove_text")
			msg.post("/backend", "camera_fight_end")
			timer.delay(0.4, false, function() fight = false act = false end)
			sound.pause("/sounds#"..level,false)
		end

	-- Broadcast final fight messages
	elseif message_id == hash("end_fight_final") then
		msg.post("#", "disable_fight")
		if enemy ~= "King" then
			msg.post("/instance" .. enemy-1 , "disable")
			enemy_disabled[enemy_type] = true
		end
	
	-- Show menu when attack is over
	elseif message_id == hash("attack_over") then
		if act then
			gui.set_enabled(gui.get_node("act"), true)
		elseif items then
			gui.set_enabled(gui.get_node("items"), true)
		end
	end
end


function flicker(self, handle, time_elapsed)
	-- Fight Flicker
	if flicker_loop < 6 then
		flicker_loop = flicker_loop+1
		
		if flicker_enabled then
			flicker_enabled = false
			gui.set_enabled(gui.get_node("flicker"), false)

		elseif flicker_enabled == false then
			sound.play("/sounds#fight")
			flicker_enabled=true
			gui.set_enabled(gui.get_node("flicker"), true)
			if flicker_loop == 1 then
				camera.set_zoom(camera_id, camera_zoom[enemy_num[enemy]])
				camera.follow(camera_id, "/backend", {offset = vmath.vector3(0,0,0)})
				camera.deadzone(camera_id, 214, 120, 214, 120)
				gui.set_scale(gui.get_node("box"),vmath.vector3(0.9,0.9,0))
				gui.set_position(gui.get_node("bottom"), vmath.vector3(0,-467,0))
			elseif flicker_loop == 3 then
				camera.deadzone(camera_id, 107, 60, 107, 60)
				gui.set_scale(gui.get_node("box"),vmath.vector3(0.8,0.8,0))
				gui.set_position(gui.get_node("bottom"), vmath.vector3(0,-424,0))
				
			elseif flicker_loop == 5 then
				camera.deadzone(camera_id, 0, 0, 0, 0)
				gui.set_scale(gui.get_node("box"),vmath.vector3(0.7,0.7,0))
				gui.set_position(gui.get_node("bottom"), vmath.vector3(0,-380,0))
			end
		end
		
	else
		sound.play("/sounds#fight_song")
		timer.cancel(handle)
		msg.post("/printer#printer_example", "printtext", {line = approach[enemy_type], battle = false})
		self.flicker_check = false
	end
end


function update(self, dt)
	-- Show selected button
	if current_button == "item" then
		gui.set_color(gui.get_node("item"), vmath.vector4(1,0,0,1))
		gui.set_color(gui.get_node("talk"), vmath.vector4(1,0,0,0.5))
	
	else
		gui.set_color(gui.get_node("item"), vmath.vector4(1,0,0,0.5))
		gui.set_color(gui.get_node("talk"), vmath.vector4(1,0,0,1))
	end

	-- Show selected action
	if act then
		gui.set_color(gui.get_node(current_button), vmath.vector4(1,1,1,1))
		gui.set_color(gui.get_node(act_unselected[1]), vmath.vector4(0.4,0.4,0.4,1))
		gui.set_color(gui.get_node(act_unselected[2]), vmath.vector4(0.4,0.4,0.4,1))
		
	-- Disable text 
	else
		gui.set_enabled(gui.get_node("talk"), true)
		gui.set_enabled(gui.get_node("item"), true)
		gui.set_enabled(gui.get_node("act"), false)
	end


	
	-- Show selected items
	if items then
		gui.set_color(gui.get_node(current_button), vmath.vector4(1,1,1,1))
		for i=1,4 do
			gui.set_color(gui.get_node(items_unselected[i]), vmath.vector4(0.4,0.4,0.4,1))
		end
		
	-- Disable text 
	else
		gui.set_enabled(gui.get_node("talk"), true)
		gui.set_enabled(gui.get_node("item"), true)
		gui.set_enabled(gui.get_node("items"), false)
	end

	-- Show menu when text stops
	if fight_printer.is_print == false and final_sender == nil then
		act_text = false
		
		if not act and not self.flicker_check and not items then
			gui.set_enabled(gui.get_node("talk"), true)
			gui.set_enabled(gui.get_node("item"), true)
		else
			gui.set_enabled(gui.get_node("talk"), false)
			gui.set_enabled(gui.get_node("item"), false)
		end
	
	else
		act_text = true
		gui.set_enabled(gui.get_node("act"), false)
		gui.set_enabled(gui.get_node("items"), false)
		gui.set_enabled(gui.get_node("talk"), false)
		gui.set_enabled(gui.get_node("item"), false)
	end

	-- Set HP Bar
	gui.set_scale(gui.get_node("HP"), vmath.vector3((HP/100),1,1))
	gui.set_text(gui.get_node("HP_value"), HP.."/100")

	--Check if dead
	if HP<= 0 and fight then
		sound.stop("/sounds#fight_song")
		msg.post("menu:/menu", "death")
		msg.post("#", "disable")
	end
end

function on_input(self, action_id, action)
	-- Managing menus (Selecting buttons)
	if not fight_printer.is_print and not final_sender and is_enabled() and action.pressed and fight then
		if not act and not items then

			-- Change selected button left
			if action_id == hash("select_left") then

				current_button = "item"
				sound.play("/sounds#select")

			-- Change selected button right
			elseif action_id == hash("select_right") then

				-- Change to talk button
				current_button = "talk"
				sound.play("/sounds#select")

			-- Select button
			elseif action_id == hash("select_enter") then

				if current_button == "talk" then

					sound.play("/sounds#select")
					gui.set_enabled(gui.get_node("talk"), false)
					gui.set_enabled(gui.get_node("item"), false)
					gui.set_enabled(gui.get_node("act"), true)
					act = true
					current_button = "act_text_1"
					act_unselected = {"act_text_2","act_text_3"}
				elseif current_button == "item" then
					sound.play("/sounds#select")
					gui.set_enabled(gui.get_node("talk"), false)
					gui.set_enabled(gui.get_node("item"), false)
					gui.set_enabled(gui.get_node("items"), true)
					items = true
					current_button = "item_text_1"
					items_unselected = {"item_text_2","item_text_3","item_text_4","item_text_5"}
				end
			end

		-- If in act menu
		elseif act then

			-- Move selection up
			if action_id == hash("select_up") then

				sound.play("/sounds#select")
				
				if current_button == "act_text_2" then
					current_button = "act_text_1"
					act_unselected = {"act_text_2","act_text_3"}
					
				elseif current_button == "act_text_3" then
					current_button = "act_text_2"
					act_unselected = {"act_text_1","act_text_3"}
				end

			-- Move selection down
			elseif action_id == hash("select_down") then

				sound.play("/sounds#select")
				
				if current_button == "act_text_2" then
					current_button = "act_text_3"
					act_unselected = {"act_text_2","act_text_1"}
				elseif current_button == "act_text_1" then
					current_button = "act_text_2"
					act_unselected = {"act_text_1","act_text_3"}
				end

			-- Check currently selected button
			elseif action_id == hash("select_enter") then

				if current_button == "act_text_1" then
					
					sound.play("/sounds#select")
					msg.post("/printer#printer_example", "printtext", {line = stats[enemy_type]})
				end

				if current_button == "act_text_2" then
					sound.play("/sounds#select")
					if enemy ~= "King" then
						if type(text_2_options[enemy_type]) == "table" and spare_order[enemy_type] == 2 then
							msg.post("/printer#printer_example", "printtext_final", {line = text_2_options[enemy_type][2]})
						elseif type(text_2_options[enemy_type]) == "table" and not text_2_check[enemy_type] then
							msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][1]})
							if spare_order[enemy_type][#spare_order[enemy_type]] == 3 then
								spare_order[enemy_type] = 3
								text_2_check[enemy_type] = true
							else
								text_2_check[enemy_type] = true
							end
						elseif type(text_2_options[enemy_type]) == "table" then
							msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][2]})
						else
							if spare_text[enemy_type] == 2 then
								msg.post("/printer#printer_example", "printtext_final", {line = text_2_options[enemy_type]})

							else
								msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type]})
							end
						end
					else
						
						if king_2_check == king_pos_check then
							msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][5]})
						elseif king_2_check == king_pos_check-1 then
							if king_2_check == 0 then
								msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][1]})
								king_2_check = king_2_check+1
							elseif king_2_check == 2 then
								msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][2]})
								king_2_check = king_2_check+1
							elseif king_2_check == 4 then
								msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][3]})
								king_2_check = king_2_check+1
							elseif king_2_check == 6 then
								msg.post("/printer#printer_example", "printtext", {line = text_2_options[enemy_type][4]})
								king_2_check = king_2_check+1
							elseif king_2_check == 8 then
								msg.post("/printer#printer_example", "printtext_final", {line = text_2_options[enemy_type][5]})							
							end
						end	
					end	
				end

				if current_button == "act_text_3" then
					sound.play("/sounds#select")
					if type(text_3_options[enemy_type]) == "table" and spare_order[enemy_type] == 3 then
						msg.post("/printer#printer_example", "printtext_final", {line = text_3_options[enemy_type][2]})
					elseif type(text_3_options[enemy_type]) == "table" and not text_3_check[enemy_type] then
						msg.post("/printer#printer_example", "printtext", {line = text_3_options[enemy_type][1]})
						if spare_order[enemy_type][#spare_order[enemy_type]] == 2 then
							spare_order[enemy_type] = 2
							text_2_check[enemy_type] = true
						elseif not spare_order[enemy_type][#spare_order[enemy_type]] == 2 then
							text_3_check[enemy_type] = true
						end
					elseif type(text_3_options[enemy_type]) == "table" then
						msg.post("/printer#printer_example", "printtext", {line = text_3_options[enemy_type][2]})
					else
						if spare_text[enemy_type] == 3 then
							msg.post("/printer#printer_example", "printtext_final", {line = text_3_options[enemy_type]})
						else
							msg.post("/printer#printer_example", "printtext", {line = text_3_options[enemy_type]})
						end
					end
				end

				

			-- Escape menu
			elseif action_id == hash("esc") then
				sound.play("/sounds#select")
				act = false
				current_button = "talk"
			end
		elseif items then
			if action_id == hash("select_up") or action_id == hash("select_down") then
				local next_button
				if action_id == hash("select_up") then
					next_button = tonumber(string.sub(current_button,-1))-1
				else
					next_button = tonumber(string.sub(current_button,-1))+1
				end
				if next_button <= 5 and next_button >=1 then
					if gui.get_text(gui.get_node("item_text_"..next_button)) ~= "-----" then
						current_button = "item_text_"..next_button
						for i=1,5 do
							if next_button ~= i then
								if i > next_button then
									sound.play("/sounds#select")
									items_unselected[i-1] = "item_text_"..i
								else
									items_unselected[i] = "item_text_"..i
									sound.play("/sounds#select")
								end
							end
						end
					end
				end
			elseif action_id == hash("select_enter") then
				local item = gui.get_text(gui.get_node(current_button))
				local slot = tonumber(string.sub(current_button,-1))
				for k, v in pairs(item_name) do
					if v == item then
						if item_type[k] == "Defense" then
							defense = item_stats[k]
							if armor ~= "-----" then
								inventory[slot] = armor
								gui.set_text(gui.get_node(current_button), inventory[slot])
							else
								for k,v in pairs(inventory) do
									if k > slot then
										inventory[k-1] = v
										gui.set_text(gui.get_node("item_text_"..k-1), v)
									end
								end
								inventory[5] = "-----"
								gui.set_text(gui.get_node(current_button), inventory[slot])
								if inventory[slot] == "-----" then
									if slot-1 > 0 then
										current_button = "item_text_"..slot-1
									end
									for i=1,5 do
										if slot-1 ~= i then
											if i > slot-1 then
												sound.play("/sounds#select")
												items_unselected[i-1] = "item_text_"..i
											else
												items_unselected[i] = "item_text_"..i
												sound.play("/sounds#select")
											end
										end
									end
								end
							end
							armor = v
							gui.set_text(gui.get_node("armor_text"), "Armor:\n"..armor)
							msg.post("/printer#printer_example", "printtext", {line = item_text[k]})
						elseif item_type[k] == "Heal" then
							HP = HP+item_stats[k]
							if HP > 100 then
								HP=100
							end
							for k,v in pairs(inventory) do
								if k > slot then
									inventory[k-1] = v
									gui.set_text(gui.get_node("item_text_"..k-1), v)
								end
							end
							inventory[5] = "-----"
							gui.set_text(gui.get_node(current_button), inventory[slot])
							if inventory[slot] == "-----" then
								if slot-1 > 0 then
									current_button = "item_text_"..slot-1
								end
								for i=1,5 do
									if slot-1 ~= i then
										if i > slot-1 then
											sound.play("/sounds#select")
											items_unselected[i-1] = "item_text_"..i
										else
											items_unselected[i] = "item_text_"..i
											sound.play("/sounds#select")
										end
									end
								end
							end
							msg.post("/printer#printer_example", "printtext", {line = item_text[k]})
						elseif item_type[k] == "Keycard" then
							msg.post("/printer#printer_example", "printtext", {line = 41})
						end
					end
				end
			elseif action_id == hash("esc") then
				sound.play("/sounds#select")
				items = false
				current_button = "item"
			end
		end
	end
end

function is_enabled()
	if act then
		return gui.is_enabled(gui.get_node("act"))
	elseif items then
		return gui.is_enabled(gui.get_node("items"))
	else
		return gui.is_enabled(gui.get_node("talk"),true)
	end
end