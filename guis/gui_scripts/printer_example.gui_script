local printer = require("printer.printer")
local styles = require("guis.styles")
local text_check
function init(self)

	-- Disable GUI
	msg.post("#", "disable")
	msg.post(".", "acquire_input_focus")

	-- Create printer
	printer.add_styles(styles)
	printer.play_sound = function(name)
		sound.play("/sounds#text")
	end
	self.printer = printer.new(self, "example")
	fight_printer = self.printer
end


function update(self, dt)

	-- Update printer
	if fight_printer ~= nil then
		fight_printer:update(dt)
	end
end


function on_input(self, action_id, action)

	if action_id == hash("space") and action.pressed then

		-- Make text instantly appear
		if fight_printer.is_print then
			fight_printer:instant_appear()

		-- If spare text has been shown. Cancel fight
		elseif final_sender == 2 then
			msg.post("/fight#fight", "end_fight_final")
			final_sender = nil
			fight_printer:clear()

		-- If spare text has not been shown. Show spare text
		elseif final_sender ~= nil then
			if text_check then
				text_check = false
				msg.post("/instance" .. enemy-1, "attack", {spare = true})	
				fight_printer:clear()
				timer.delay(8, false, function()
					fight_printer:print(text[spare[enemy_num[enemy]]])
					final_sender = 2
				end)
			end

		-- Disable textbox
		else
			fight_printer:clear()
			if text_check then
				text_check = false
				msg.post("/instance" .. enemy-1, "attack", {spare = false})	
			end
		end
	end
end


function on_message(self, message_id, message, sender)

	-- Print Message
	if message_id == hash("printtext") then
		fight_printer:print(text[message.line])
		if message.battle == nil then
			text_check = true
		end
 	-- Print final message
	elseif message_id == hash("printtext_final") then
		fight_printer:print(text[message.line])
		final_sender = sender
		text_check = true
	-- Remove Text Box
	elseif message_id == hash("remove_text") then
		fight_printer:clear()
	end
end