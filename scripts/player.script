go.property("speed", 350)
go.property("touching_item", false)
go.property("touching_lock", false)
go.property("total_locks",0)
go.property("slot",0)
go.property("touching_sign",false)
touched_item = ""
touched_lock = ""
touched_sign = ""

function init(self)
	print(0)
	-- Acquire Input Focus
	msg.post(".", "acquire_input_focus")
	go.set_position(temp_position)
	armor = temp_armor
	-- Start Variable
	self.dir = vmath.vector3()
	self.correction = vmath.vector3()
	physics.set_maskbit("#player_bottom", "trigger", true)
	physics.set_maskbit("#player_top", "trigger", true)
end


function update(self, dt)
	-- Walking
	local pos = go.get_position()
	go.set_position(pos + self.dir * self.speed * dt)

	--Setting correct idle
	if self.current_anim == hash("player_walk_left") then
		anim = hash("player_left_idle")
		
	elseif self.current_anim == hash("player_walk_right") then
		anim = hash("player_right_idle")
	
	end
	
	-- Detecting needed animation
	if self.dir.x > 0 then
		anim = hash("player_walk_left")
		
	elseif self.dir.x < 0 then
		anim = hash("player_walk_right")
		
	elseif self.dir.y > 0 then
		anim = hash("player_walk_right")
		
	elseif self.dir.y < 0 then
		anim = hash("player_walk_right")
	end

	-- Resets direction
	self.dir = vmath.vector3()  

	-- Play Animation
	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end  


	-- Reset Variables
	self.correction = vmath.vector3()
	self.speed = 350
	local screen_pos = camera.world_to_screen(camera_id, go.get_position())


	-- Fleeing
	if screen_pos.x < 190 or screen_pos.x > 1100 or screen_pos.y < 200 or screen_pos.y > 600 then
		if fight and enemy ~= "King" and enemy ~= nil then
			if can_flee == enemy_num[enemy-1] then
				msg.post("/fight", "disable_fight")
			else
				go.set_position(original_pos[enemy_num[enemy]])
			end
		end
	end

end

function on_input(self, action_id, action)
	-- Input detection
	if action_id == hash("down") and not confrontation and not transition and not king_spare and not credits then
		self.dir.y = -1
	elseif action_id == hash("up") and not confrontation and not transition and not king_spare and not credits then
		self.dir.y = 1
		
	elseif action_id == hash("left") and not confrontation and not transition and not king_spare and not credits then
		self.dir.x = -1
		
	elseif action_id == hash("right") and not confrontation and not transition and not king_spare and not credits then
		self.dir.x = 1
	elseif action_id == hash("pick_up") and action.pressed then

		if self.touching_item and does_object_exist("/"..tostring(touched_item)) and not fight then
			count = 0
			local full = false
			for k,v in pairs(inventory) do
				count = count+1
				if v == "-----" then
					msg.post("/printer#printer_example", "printtext", {line = item_pickup[touched_item] ,battle = false})
					go.delete("/"..touched_item)
					inventory[k] = item_name[touched_item]
					touching_item = false
					touched_item = nil
					if count == 5 then
						full = true
					end
					break
				end
			end
			if count == 5 and not full then
				msg.post("/printer#printer_example", "printtext", {line = 32,battle = false})
			end
		elseif self.touching_lock then
			self.total_locks = self.total_locks+1
			sprite.play_flipbook(touched_lock.."#sprite", touched_lock:sub(2).."entered")
			for k,v in pairs(inventory) do
				if k > self.slot then
					inventory[k-1] = v
				end
			end
			inventory[5] = "-----"
			self.touching_lock = nil
			touched_lock = nil
			self.slot = nil
			if self.total_locks == 3 then
				tilemap.set_visible("/cell#cell","hidden_wall",false)
				sound.pause("/sounds#"..level,true)
				camera.shake(camera_id,0.03,0.5,both,function()
					sound.pause("/sounds#"..level,false)
				end)
				sound.play("/sounds#wall_fall")
			else
				sound.play("/sounds#lock_enter")
			end
		elseif self.touching_sign then
			print(3)
			if touched_sign == 1 then
				print(4)
				msg.post("/printer#printer_example", "printtext", {line = 97,battle=false})
			elseif touched_sign == 2 then
				msg.post("/printer#printer_example", "printtext", {line = 98,battle=false})
			elseif touched_sign == 3 then
				msg.post("/printer#printer_example", "printtext", {line = 99,battle=false})
				
			end
		end
	end
end


function on_message(self, message_id, message, sender)
	--Wall collisions
	if message_id == hash("contact_point_response") then

		if message.other_group == hash("wall") or message.other_group == hash("desks") then

			if message.distance > 0 then
				local proj = vmath.project(self.correction, message.normal * message.distance)

				if proj < 1 then
					local comp = (message.distance - message.distance * proj) * message.normal
					go.set_position(go.get_position() + comp)
					self.correction = self.correction + comp
				end
			end
		end

		-- Check for guard

	elseif message_id == hash("trigger_response") then
		print(1)
		local id = msg.url(message.other_id).path
		if id == hash("/CellEnd") and not confrontation and message.enter then
			msg.post("/transition#transition","docking_bay_transition")
			go.set_position(vmath.vector3(10105,1383,1))
			temp_position = go.get_position()
		elseif id == hash("/KingSpawn") and not fight and not confrontation and message.enter then
			msg.post("/king","king_start")
		elseif string.find(tostring(id),"KingCheck") and message.enter then
			king_pos_check = tonumber(string.sub(string.sub(tostring(id),-2),-2,1))
			king_2_check = king_pos_check-1
			go.delete(id)
		elseif id == hash("/Credits") then
			msg.post("/printer#printer_example", "printtext", {line = 93,battle=false})
			credits = true
		elseif string.sub(string.sub(tostring(id),-2),-2,1) == "1" and string.find(tostring(id),"sign") then
			print(2)
			if message.enter then
				self.touching_sign = true
				touched_sign = 1
			else
				self.touching_sign = nil
				touched_sign = nil
			end
		elseif string.sub(string.sub(tostring(id),-2),-2,1) == "2" and string.find(tostring(id),"sign") then
			if message.enter then
				self.touching_sign = true
				touched_sign = 2
			else
				self.touching_sign = nil
				touched_sign = nil
			end
		elseif string.sub(string.sub(tostring(id),-2),-2,1) == "3" and string.find(tostring(id),"sign") then
			if message.enter then
				self.touching_sign = true
				touched_sign = 3
			else
				self.touching_sign = nil
				touched_sign = nil
			end
		
		end
		for i, v in pairs(collisions) do
			if id == hash(collisions[i]) then
				if does_object_exist("/instance"..tonumber(i:sub(-1,-1))-1) then
					msg.post("/instance"..tonumber(i:sub(-1,-1))-1, "Guard")
				end
			end
		end
		for k, v in pairs(item_collision) do
			if id == hash(v) and message.enter and tostring(sender) == "url: [Cell:/player#player_top]" then
					self.touching_item = true
					touched_item = v:sub(2)
			elseif not message.enter and tostring(sender) == "url: [Cell:/player#player_top]" then
				self.touching_item = nil
				touched_item = nil
			end
		end

		for k, v in pairs(locks) do
			if id == hash(v) and message.enter then
				for i,f in pairs(inventory) do
					if f == k then
						self.touching_lock = true
						touched_lock = v
						self.slot = i
					end
				end
			elseif not message.enter then
				self.touching_lock = nil
				touched_lock = nil
				self.slot = nil
			end
		end
	end
end
-- Check of object exists
function does_object_exist(id)
    return pcall(function(id) go.get_position(id) end, id) == true
end